//
//Forward - Right Inversed Direction
//        - Left Normal Direction
//
//Reverse - Right Normal Direction
//        - Left Inversed Direction
//
//Right - Right Reversing
//      - Left Forward
//
//Left  - Right Forward
//Right - Left Reversing
//

#include <SoftwareSerial.h>
#include <Wire.h>
#include <Arduino.h>
#include <MeMegaPi.h>
#include "MeEEPROM.h"

MeMegaPiDCMotor motorRight(M1);
MeMegaPiDCMotor motorLeft(M2);
MeUltrasonicSensor ultraSensor(PORT7);
MeLineFollower lineFinder(PORT6); // Line Follower configuration

const unsigned int motorSpeed = 150;
const unsigned int objectMotorSpeed = 150;
const unsigned int turnTime = 1500;
unsigned int distanceRight = 0;
unsigned int distanceLeft = 0;
bool checking = false;
int speed1=100;
int speed2=150;

void setup()
{
  Serial.begin(9600); //for serial readout
}

void robotStop()  { //function used for stopping robot
  motorRight.stop();
  motorLeft.stop();
}

void robotRun(int speed) {  //function for moving robot directly forward
  motorRight.run(-speed); /* value: between -255 and 255. */
  motorLeft.run(speed); /* value: between -255 and 255. */
  Serial.println("Forward");
}
void turnRight(int speed) {
  motorRight.run(speed); /* value: between -255 and 255. */
  motorLeft.run(speed); /* value: between -255 and 255. */
  Serial.println("Right");
  delay(turnTime);
  robotStop();
}
void turnLeft(int speed) {  //function for turning left
  motorRight.run(-speed); /* value: between -255 and 255. */
  motorLeft.run(-speed); /* value: between -255 and 255. */
  Serial.println("Left");
  delay(turnTime);  //waits the time to allow the robot to turn
  robotStop();
}
void sensorReading()  { //function for ultrasoninc sensor readout to serial
  Serial.print("Distance : ");
  Serial.print(ultraSensor.distanceCm());
  Serial.println(" cm");
  delay(100);
}
void detectingObject()  {
  robotStop();  //Stops Robot
  turnRight(objectMotorSpeed);
  distanceRight = ultraSensor.distanceCm();
  Serial.print(distanceRight);
  turnLeft(objectMotorSpeed); //original pos
  delay(1000);
  turnLeft(objectMotorSpeed);
  distanceLeft = ultraSensor.distanceCm();
  Serial.print(distanceLeft);
  turnRight(objectMotorSpeed);  //return to original position
  delay(2500);
  if (distanceRight >= distanceLeft) {
    rightChecking();
    }
  else  {
      leftChecking();
    }
}

void rightChecking()  {
  turnRight(objectMotorSpeed);
  robotRun(objectMotorSpeed * 2);
  delay(1500);
  turnLeft(objectMotorSpeed);
  delay(1000);
  int rightCheckDistance = ultraSensor.distanceCm();
    if (rightCheckDistance < 30)  {
      rightChecking();
  }
    else  {
      robotRun(objectMotorSpeed * 2);
      delay(1500);
      turnLeft(objectMotorSpeed); //line checking needed here
      digitalWrite(PORT6, HIGH);  //turns back on line follower
      lineFollowing(S1_OUT_S2_OUT);
  }
}
void leftChecking() {
  turnLeft(objectMotorSpeed);
  robotRun(objectMotorSpeed);
  delay(1500);
  turnRight(objectMotorSpeed);
  delay(1000);
  int leftCheckDistance = ultraSensor.distanceCm();
    if (leftCheckDistance < 30)  {
      leftChecking();
  }
    else  {
      robotRun(objectMotorSpeed);
      turnRight(objectMotorSpeed);//line checking needed here
      digitalWrite(PORT6, HIGH);  //turns back on line follower
      lineFollowing(S1_OUT_S2_OUT);
  }
}

void lineFollowing(int sensorState){
  switch(sensorState){

    case S1_IN_S2_IN: //Sensor 1 and 2 are inside of black line
      motorRight.run(-motorSpeed); 
      motorLeft.run(motorSpeed);
      break;

    case S1_IN_S2_OUT:  //Sensor 2 is outside of black line
      motorRight.run(-speed2); 
      motorLeft.run(-speed1); 
      break;

    case S1_OUT_S2_IN:  //Sensor 1 is outside of black line
      motorRight.run(speed1); 
      motorLeft.run(speed2);
      break;

    case S1_OUT_S2_OUT: //"Sensor 1 and 2 are outside of black line"
      motorRight.run(-speed2); 
      motorLeft.run(-speed1);
      delay(500);
      motorRight.run(speed1); 
      motorLeft.run(speed2);
      if  (sensorState != S1_IN_S2_IN)  {
        lineFollowing(S1_OUT_S2_OUT);
      }
      break;

    default: 
      break;
}
}

void loop() {
  int sensorState = lineFinder.readSensors();
  sensorReading();
  while (ultraSensor.distanceCm() > 30 & checking == false)  {
  lineFollowing(sensorState);
  }
  detectingObject();
  checking = true; 
  }
  //robotRun(-motorSpeed);  //Reverse
  


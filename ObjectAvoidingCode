#include <SoftwareSerial.h>
#include <Wire.h>
#include <Arduino.h>
#include <MeMegaPi.h>
#include "MeEEPROM.h"

MeMegaPiDCMotor motorRight(M1);
MeMegaPiDCMotor motorLeft(M2);
MeUltrasonicSensor ultraSensor(PORT7);
MeLineFollower lineFinder(PORT6);

const unsigned int motorSpeed = 150;
const unsigned int objectMotorSpeed = 120;
const unsigned int turnTime = 1500;
unsigned int distanceRight = 0;
unsigned int distanceLeft = 0;
bool objectCheckingMode = false;
int speedSlow = 100;

void setup() {
  Serial.begin(9600);
}

void robotStop() {
  motorRight.stop();
  motorLeft.stop();
}

void robotRun(int speed) {
  speed = min(speed, 255);
  motorRight.run(-speed);
  motorLeft.run(speed);
  Serial.println("Forward");
}

void turnRight(int speed) {
  motorRight.run(speed);
  motorLeft.run(speed);
  Serial.println("Right");
  delay(turnTime);
  robotStop();
}

void turnLeft(int speed) {
  motorRight.run(-speed);
  motorLeft.run(-speed);
  Serial.println("Left");
  delay(turnTime);
  robotStop();
}

void sensorReading() {
  Serial.print("Distance : ");
  Serial.print(ultraSensor.distanceCm());
  Serial.println(" cm");
  delay(100);
}

void detectingObject() {
  robotStop();
  turnRight(motorSpeed);
  distanceRight = ultraSensor.distanceCm();
  Serial.print("Right Distance: ");
  Serial.println(distanceRight);

  turnLeft(motorSpeed);
  delay(1000);

  turnLeft(motorSpeed);
  distanceLeft = ultraSensor.distanceCm();
  Serial.print("Left Distance: ");
  Serial.println(distanceLeft);

  turnRight(motorSpeed);
  delay(1000);

  if (distanceRight >= distanceLeft) {
    rightChecking();
  } else {
    leftChecking();
  }
}

void rightChecking() {
  turnRight(motorSpeed);  // Turn right
  robotRun(motorSpeed);  // Move forward after avoiding the object
  delay(2000);  
  turnLeft(motorSpeed);  // Return to original direction
  robotRun(motorSpeed);  // Move forward a little to fully clear the object
  delay(3000);
  turnLeft(objectMotorSpeed);  // Return to original direction
  robotRun(motorSpeed);
  delay(1000);
  objectCheckingMode = false;  // Reset after obstacle is fully cleared
}

void leftChecking() {  
  turnLeft(motorSpeed);  // Turn left
  robotRun(motorSpeed);  // Move forward after avoiding the object
  delay(2000);  
  turnRight(motorSpeed);  // Return to original direction
  robotRun(motorSpeed);  // Move forward a little to fully clear the object
  delay(3000);
  turnRight(objectMotorSpeed);  // 
  robotRun(motorSpeed);
  delay(1000);
  objectCheckingMode = false;  // Reset after obstacle is fully cleared
}

void lineFollowing(int sensorState) {
  switch (sensorState) {
    case 0:  // Both sensors on black
      motorRight.run(-motorSpeed);
      motorLeft.run(motorSpeed);
      break;
    case 1:  // Left black, Right white
      motorRight.run(-speedSlow);
      motorLeft.run(-speedSlow);
      break;
    case 2:  // Left white, Right black
      motorRight.run(speedSlow);
      motorLeft.run(speedSlow);
      break;
    case 3:  // Both white
      while (sensorState != 0 || sensorState != 1 || sensorState != 2)  { 
        motorRight.run(-speedSlow); 
        motorLeft.run(-speedSlow);
        delay(500);
        motorRight.run(-motorSpeed);
        motorLeft.run(motorSpeed);
        delay(500);
        motorRight.run(speedSlow); 
        motorLeft.run(speedSlow);
        delay(500);
      }
      break;
    default:
      break;
  }
}

void loop() {
  int sensorState = lineFinder.readSensors();
  sensorReading();
  
  while (ultraSensor.distanceCm() > 30 && objectCheckingMode == false) {
    lineFollowing(lineFinder.readSensors());
  }

  objectCheckingMode = true;
  detectingObject();

  return;  // Prevent immediate return to line-following after obstacle avoidance
}
